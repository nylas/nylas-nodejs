const fs = require('fs');
const path = require('path');

/**
 * Generates src/types.ts by extracting types from the codebase
 */
async function generateTypesIndex() {
  console.log('🔍 Extracting types from codebase...'); // eslint-disable-line no-console
  
  // Define the header comment and imports
  const header = `/**
 * Types and interfaces for third-party developers building extensions or integrations with the Nylas SDK.
 * 
 * This file is auto-generated by scripts/generateTypesIndex.js
 * DO NOT EDIT MANUALLY - your changes will be overwritten
 * 
 * This module provides type-only exports for:
 * - Configuration types
 * - Base classes and interfaces
 * - Resource parameter interfaces
 * - Request/response types
 * - Error types
 * - Constants and utility types
 * 
 * @example
 * \`\`\`typescript
 * import type { NylasConfig, ListMessagesParams, NylasResponse } from 'nylas/types';
 * 
 * // Use types for configuration
 * const config: NylasConfig = {
 *   apiKey: 'your-api-key',
 *   apiUri: 'https://api.us.nylas.com'
 * };
 * 
 * // Use types for method parameters
 * const params: ListMessagesParams = {
 *   identifier: 'grant-id',
 *   queryParams: { limit: 10 }
 * };
 * \`\`\`
 */

// Configuration types
export type {
  NylasConfig,
  OverridableNylasConfig,
  Overrides,
  Region,
} from './config.js';

export {
  REGION_CONFIG,
  DEFAULT_SERVER_URL,
  DEFAULT_REGION,
} from './config.js';

// Base classes and interfaces
export type { AsyncListResponse } from './resources/resource.js';
export { Resource } from './resources/resource.js';
export type { default as APIClient } from './apiClient.js';

// Export enum values that need to be used at runtime
export { WhenType } from './models/events.js';

// APIClient types
export type { RequestOptionsParams } from './apiClient.js';
export { FLOW_ID_HEADER, REQUEST_ID_HEADER } from './apiClient.js';

// Response types
export type {
  NylasResponse,
  NylasListResponse,
  NylasBaseResponse,
  ListResponseInnerType,
} from './models/response.js';

// Common query parameter types
export type { ListQueryParams } from './models/listQueryParams.js';

// Error types
export type {
  AbstractNylasApiError,
  AbstractNylasSdkError,
  NylasApiError,
  NylasOAuthError,
  NylasSdkTimeoutError,
  NylasApiErrorResponse,
  NylasApiErrorResponseData,
  NylasOAuthErrorResponse,
} from './models/error.js';

`;

  // Get resource parameter interfaces by scanning resource files
  const resourcesDir = path.join(__dirname, '..', 'src', 'resources');
  const resourceFiles = fs.readdirSync(resourcesDir)
    .filter(file => file.endsWith('.ts') && file !== 'resource.ts')
    .map(file => path.join(resourcesDir, file));

  let resourceExports = '';
  
  // Extract parameter interfaces from each resource file
  for (const resourceFile of resourceFiles) {
    const resourceName = path.basename(resourceFile, '.ts');
    const relativePath = `./resources/${resourceName}.js`;
    
    try {
      const content = fs.readFileSync(resourceFile, 'utf8');
      
      // Extract interface names that end with 'Params'
      const interfacePattern = /^export interface ([A-Za-z0-9_]+Params)\s*{/gm;
      const interfaces = [];
      let match;
      
      while ((match = interfacePattern.exec(content)) !== null) {
        interfaces.push(match[1]);
      }
      
      if (interfaces.length > 0) {
        resourceExports += `// Resource parameter interfaces - ${resourceName}\n`;
        resourceExports += `export type {\n`;
        interfaces.forEach(interfaceName => {
          resourceExports += `  ${interfaceName},\n`;
        });
        resourceExports += `} from '${relativePath}';\n\n`;
      }
    } catch (error) {
      console.warn(`⚠️  Could not process ${resourceFile}: ${error.message}`);
    }
  }

  // Footer exports
  const footer = `// Utility constants
export { SDK_VERSION } from './version.js';

// Re-export all model types for convenience
export * from './models/index.js';
`;

  // Combine all parts
  const generatedContent = header + resourceExports + footer;
  
  // Write to src/types.ts
  const outputPath = path.join(__dirname, '..', 'src', 'types.ts');
  fs.writeFileSync(outputPath, generatedContent);
  
  console.log('✅ Generated src/types.ts successfully!'); // eslint-disable-line no-console
  console.log(`📄 File: ${outputPath}`); // eslint-disable-line no-console
  console.log(`📊 Extracted parameter interfaces from ${resourceFiles.length} resource files`); // eslint-disable-line no-console
}

// Run the generator
generateTypesIndex().catch(error => {
  console.error('❌ Error generating types index:', error);
  process.exit(1);
}); 