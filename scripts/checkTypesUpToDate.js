const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

/**
 * CI script to check if types are up-to-date
 * This validates that types.ts matches what would be generated
 * Used in CI/CD pipelines to catch out-of-date types
 */

const COLORS = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`); // eslint-disable-line no-console
}

function checkTypesUpToDate() {
  log('🔍 Checking if types are up-to-date...', 'blue');
  
  const typesPath = path.join(__dirname, '..', 'src', 'types.ts');
  
  // Check if types.ts exists
  if (!fs.existsSync(typesPath)) {
    log('❌ src/types.ts does not exist', 'red');
    log('💡 Run: npm run generate-types-index', 'yellow');
    process.exit(1);
  }
  
  // Read current content
  const currentContent = fs.readFileSync(typesPath, 'utf8');
  
  // Check if it's auto-generated
  if (!currentContent.includes('auto-generated by scripts/generateTypesIndex.js')) {
    log('❌ src/types.ts is not auto-generated', 'red');
    log('💡 Run: npm run generate-types-index', 'yellow');
    process.exit(1);
  }
  
  // Create a backup of current content
  const backupPath = typesPath + '.backup';
  fs.writeFileSync(backupPath, currentContent);
  
  try {
    // Generate new types silently
    execSync('npm run generate-types-index', { stdio: 'pipe' });
    
    // Read the newly generated content
    const newContent = fs.readFileSync(typesPath, 'utf8');
    
    // Compare contents
    if (currentContent !== newContent) {
      log('❌ Types are out of date!', 'red');
      log('', 'reset');
      log('The src/types.ts file is not up-to-date with the current codebase.', 'red');
      log('', 'reset');
      log('To fix this, run locally:', 'yellow');
      log('  npm run generate-types-index', 'yellow');
      log('  git add src/types.ts', 'yellow');
      log('  git commit -m "chore: update generated types"', 'yellow');
      log('', 'reset');
      
      // Restore original content
      fs.writeFileSync(typesPath, currentContent);
      fs.unlinkSync(backupPath);
      
      process.exit(1);
    }
    
    // Clean up backup
    fs.unlinkSync(backupPath);
    
    log('✅ Types are up-to-date!', 'green');
    
  } catch (error) {
    // Restore original content if generation failed
    if (fs.existsSync(backupPath)) {
      fs.writeFileSync(typesPath, currentContent);
      fs.unlinkSync(backupPath);
    }
    
    log('❌ Failed to generate types:', 'red');
    console.error(error.message);
    process.exit(1);
  }
}

function main() {
  log('🚀 Checking types status for CI...', 'blue');
  checkTypesUpToDate();
  log('🎉 All checks passed!', 'green');
}

if (require.main === module) {
  main();
} 